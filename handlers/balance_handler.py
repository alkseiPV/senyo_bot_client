from aiogram import Router,F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from api.client import get_client_info
from models.client import ClientModel
from keyboards.start_keyboards import main_menu_keyboard

router = Router()

@router.message(F.text =="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å")
async def check_balance(message:Message,state: FSMContext):
    # –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM
    data = await state.get_data()
    client_id = data.get("client_id")
    if not client_id:
        await message.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ (/start).")
        return
    
    # –í—ã–∑—ã–≤–∞–µ–º –ê–ü–ò –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞
    try:
        client_data = await get_client_info(client_id=client_id,is_telegram=False)
        client = client_data
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ backend: {str(e)}")
        return
    
    response = (
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å:\n"
        f"üí∞ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –±–∞–ª–ª—ã: {client.permanent_points}\n"
        f"üí∞ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –±–∞–ª–ª—ã: {client.temporary_points}"
    )

    await message.answer(response,reply_markup=main_menu_keyboard())
    