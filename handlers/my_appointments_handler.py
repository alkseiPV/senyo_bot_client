import logging
from typing import List

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from api.appointment import cancel_appointment

from api.appointment import get_appointments
from models.appointment import AppointmentModel
from keyboards.start_keyboards import main_menu_keyboard

logger = logging.getLogger(__name__)
router = Router()

class MyAppointments(StatesGroup):
    viewing = State()
    canceling = State()
    
@router.message(F.text == "–ú–æ–∏ –∑–∞–ø–∏—Å–∏")
async def show_my_appointments(message: Message, state: FSMContext):
    data =  await state.get_data()
    client_id = data.get("client_id")
    if not client_id:
        await message.answer("–û—à–∏–±–∫–∞: ID –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ /start.")
        return
    
    try: 
        appointments: List[AppointmentModel] = await get_appointments(client_id = client_id)
        active_appointments = [app for app in appointments if app.status in ["–æ–∂–∏–¥–∞–Ω–∏–µ", "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"]]
        
        if not active_appointments:
            text = "üòî –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π."
        else:
            text = "üìÖ –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏: \n\n"
            active_appointments.sort(key=lambda a: a.date)
            for app in active_appointments:
                status_text = "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞" if app.status == "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω" else "–æ–∂–∏–¥–∞–Ω–∏–µ"
                time_str = app.date.strftime("%d.%m.%Y %H:%M")
                text += f"{time_str}\n{app.service_name} ({status_text})\n\n"
        
        keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å")],
                [KeyboardButton(text="–ù–∞–∑–∞–¥")],], resize_keyboard=True)
        await message.answer(text, reply_markup=keyboard)
        await state.set_state(MyAppointments.viewing)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.set_state(None)
        
@router.message(MyAppointments.viewing, F.text == "–ù–∞–∑–∞–¥")
async def back_to_main(message: Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard())
    await state.set_state(None)

@router.message(MyAppointments.viewing, F.text =="–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å")
async def start_cancel(message: Message, state:FSMContext):
    data = await state.get_data()
    client_id = data.get("client_id")
    if not client_id:
        await message.answer("–û—à–∏–±–∫–∞: ID –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ /start.")
        return
    
    try:
        appointments: List[AppointmentModel] = await get_appointments(client_id=client_id)
        active_appointments = [app for app in appointments if app.status in ["–æ–∂–∏–¥–∞–Ω–∏–µ", "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"]]
        
        if not active_appointments:
            await message.answer("üòî –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
            await state.set_state(MyAppointments.viewing)  # –û—Å—Ç–∞—ë–º—Å—è –≤ viewing
            return

        inline_kb = InlineKeyboardMarkup(inline_keyboard=[])
        for app in sorted(active_appointments, key=lambda a: a.date):
            time_str = app.date.strftime("%d.%m.%Y %H:%M")
            inline_kb.inline_keyboard.append(
                [InlineKeyboardButton(text=time_str, callback_data=f"cancel_{app.id}")]
            )
        await message.answer("üóë –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Ç–º–µ–Ω—ã:", reply_markup= inline_kb)
        await state.set_state(MyAppointments.canceling)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –æ—Ç–º–µ–Ω—ã: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.set_state(None)
        
@router.callback_query(MyAppointments.canceling, F.data.startswith("cancel_"))
async def cancel_appointment_callback(callback: CallbackQuery, state: FSMContext):
    try:
        app_id = int(callback.data.split("_")[1])  # –ü–∞—Ä—Å–∏–º ID –∑–∞–ø–∏—Å–∏ –∏–∑ callback_data
        await cancel_appointment(appointment_id=app_id)  # –í—ã–∑–æ–≤ API –¥–ª—è –æ—Ç–º–µ–Ω—ã
        await callback.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await callback.answer("‚úÖ –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ø–∞–ø-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await callback.message.answer("‚úÖ –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard())
        await state.set_state(None)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            