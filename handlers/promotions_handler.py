import logging

from aiogram import Router, F
from aiogram.types import Message

from api.promotions import get_promotions
from keyboards.promotions_keyboard import promotions_back_keyboard
from keyboards.start_keyboards import main_menu_keyboard

logger = logging.getLogger(__name__)
router = Router()

@router.message(F.text.casefold() =='–ø—Ä–æ–º–æ–∞–∫—Ü–∏–∏')
async def show_promotions(message:Message):
    try:
        promotions = await get_promotions()
        if not promotions:
            await message.answer(
                "üòî –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∞–∫—Ü–∏–π –Ω–µ—Ç.",
                reply_markup=promotions_back_keyboard(),
            )
            return
        promo_text = "üéÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–º–æ–∞–∫—Ü–∏–∏: \n\n"
        for promo in promotions:
            gender_text = "–º—É–∂—á–∏–Ω" if promo.gender == "–ú—É–∂—Å–∫–æ–π" else "–∂–µ–Ω—â–∏–Ω" if promo.gender == "–ñ–µ–Ω—Å–∫–∏–π" else "–≤—Å–µ—Ö"
            promo_text += (
                f"**{promo.title}**\n"
                f"{promo.description}\n"
                f"üí∞ –ë–∞–ª–ª—ã: {promo.added_points}\n"
                f"–î–ª—è: {  gender_text }\n"
                f"–° {promo.start_date.strftime('%d.%m.%Y')} –ø–æ {promo.expiration_date.strftime('%d.%m.%Y')}\n\n"
            )
        await message.answer(
            promo_text,
            reply_markup=promotions_back_keyboard(),
            parse_mode="Markdown",
        )
    except Exception as err:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–º–æ–∞–∫—Ü–∏–π: %s",err)
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–º–æ–∞–∫—Ü–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ",
            reply_markup=promotions_back_keyboard(),
        )

# @router.message(F.text.casefold() == "–Ω–∞–∑–∞–¥")
# async def go_back(message: Message):
#     await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard())